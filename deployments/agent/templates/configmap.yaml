apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "session-manager-agent.fullname" . }}
  labels:
    {{- include "session-manager-agent.labels" . | nindent 4 }}
data:

  config.yaml: |
    admin:
      socket: /tmp/sockets/admin.sock
    proxy:
      baseUrl: {{ .Values.proxy.baseUrl }}
      http:
        path: /v1/sessions-worker-service/http
        poolSize: {{ $.Values.proxy.http.poolSize }}
        dialTimeout: 5s
      upgrade:
        path: /v1/sessions-worker-service/upgrade
        poolSize: {{ $.Values.proxy.upgrade.poolSize }}
        dialTimeout: 5s
      tls:
        enable: {{ .Values.global.worker.tls.enable }}
    sessionManagerServerWorkerServiceAddr: {{ .Values.sessionManagerServerWorkerServiceAddr }}
    envoy:
      socket: /tmp/sockets/envoy.sock
    httpPort: {{ .Values.httpPort }}
    componentStatusSender:
      enable: {{ .Values.componentStatusSender.enable }}
      name: {{ .Values.componentStatusSender.name }}
      initialDelay: {{ .Values.componentStatusSender.initialDelay }}
      interval: {{ .Values.componentStatusSender.interval }}
      clusterManagerServerWorkerServiceAddr: {{ .Values.global.worker.controlPlaneAddr | default .Values.componentStatusSender.clusterManagerServerWorkerServiceAddr }}

  envoy.yaml: |
    node:
      id: {{ .Values.envoyClusterId }}
      cluster: {{ .Values.envoyClusterId }}

    admin:
      access_log_path: /dev/stdout
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: 9901

    static_resources:
      listeners:
      - name: listener_https
        address:
          pipe:
            path: /tmp/sockets/envoy.sock
            # Allow everyone to access so that a non-root user in the agent container can access
            # the socket.
            mode: 0777
        access_log:
          name: envoy.access_loggers.file
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
            path: /dev/stdout
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: auto
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              route_config:
                name: local_route
                virtual_hosts:
                - name: agent
                  domains:
                  - "*"
                  routes:
                  - match:
                      path: "/_/status"
                    route:
                      cluster: agent
                  - match:
                      prefix: "/api"
                    route:
                      cluster: apiserver
                      idle_timeout: 0s
                      # Explicitly disable timeout as we have a long-running request like 'kubectl logs -f'.
                      timeout: 0s
                  - match:
                      prefix: "/v1/sessions"
                    route:
                      cluster: services
                      idle_timeout: 0s
                      timeout: 0s
                 {{- if .Values.proxy.slurm.enable }}
                  - match:
                      prefix: "/slurm"
                    route:
                      cluster: slurm
                      idle_timeout: 0s
                      timeout: 0s
                 {{- end }}
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function get_token()
                      local file = io.open("/var/run/secrets/kubernetes.io/serviceaccount/token", "rb")
                      local token = file:read "*all"
                      file:close()
                      return token
                    end
                    function envoy_on_request(request_handle)
                      request_handle:headers():replace("Authorization", "Bearer " .. get_token())
                    end
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    local function starts_with(str, start)
                      return str:sub(1, #start) == start
                    end
                    function envoy_on_request(request_handle)
                      local path = request_handle:headers():get(":path")
                      if starts_with(path, "/v1/sessions") then
                        request_handle:headers():replace(":authority", string.gsub(path, "/v1/sessions/[^/]+/v1/services/notebooks/([^/]+)/([^/?]+).*", "%1.%2.svc.cluster.local:8888"))
                      end
                    end
              - name: envoy.filters.http.dynamic_forward_proxy
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
                  dns_cache_config:
                    name: dynamic_forward_proxy_cache_config
                    dns_lookup_family: V4_ONLY
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              http2_protocol_options:
                allow_connect: true
              upgrade_configs:
              - upgrade_type: "SPDY/3.1"
              - upgrade_type: websocket

      clusters:
      - name: agent
        connect_timeout: 0.25s
        type: STATIC
        load_assignment:
          cluster_name: agent
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  pipe:
                    path: /tmp/sockets/admin.sock

      - name: apiserver
        connect_timeout: 0.25s
        # Without TCP keepalive, AKS API server returns 503 when an connection is idle for a certain
        # period of time.
        upstream_connection_options:
          tcp_keepalive:
            keepalive_time: 60
        type: STRICT_DNS
        load_assignment:
          cluster_name: apiserver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: kubernetes.default
                    port_value: 443
        transport_socket_matches:
        - name: "tls"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
              common_tls_context:
                alpn_protocols: http/1.1
                validation_context:
                  trusted_ca:
                    filename: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt

      - name: services
        connect_timeout: 0.25s
        upstream_connection_options:
          tcp_keepalive:
            keepalive_time: 60
        lb_policy: CLUSTER_PROVIDED
        cluster_type:
          name: envoy.clusters.dynamic_forward_proxy
          typed_config:
             "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
             dns_cache_config:
               name: dynamic_forward_proxy_cache_config
               dns_lookup_family: V4_ONLY
      {{- with .Values.proxy.slurm }}
      {{- if .enable }}
      - name: slurm
        connect_timeout: 0.25s
        type: STRICT_DNS
        load_assignment:
          cluster_name: slurm
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .controlPlaneAddress }}
                    port_value: {{ .controlPlanePort }}
      # TODO(kenji): Support TLS.
      {{- end }}
      {{- end }}